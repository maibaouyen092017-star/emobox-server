// =============================
// üéôÔ∏è EMOBOX CLIENT (Web) ‚Äî Thu √¢m, g·ª≠i tr·ª±c ti·∫øp, h·∫πn gi·ªù
// =============================

const API_BASE = "https://emobox-server.onrender.com"; // üîó URL server backend
let mediaRecorder, audioChunks = [], audioBlob = null;

// =============================
// üéß Ghi √¢m & xem tr∆∞·ªõc
// =============================
document.getElementById("recordBtn").addEventListener("click", async () => {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];

    mediaRecorder.ondataavailable = (e) => audioChunks.push(e.data);
    mediaRecorder.onstop = () => {
      audioBlob = new Blob(audioChunks, { type: "audio/webm" });
      const url = URL.createObjectURL(audioBlob);
      const audio = document.getElementById("audioPreview");
      audio.src = url;
      audio.controls = true;
      document.getElementById("status").innerText = "üéß Ghi √¢m xong!";
    };

    mediaRecorder.start();
    document.getElementById("status").innerText = "üéôÔ∏è ƒêang ghi √¢m...";
  } catch (err) {
    alert("‚ùå Kh√¥ng th·ªÉ truy c·∫≠p micro: " + err.message);
  }
});

document.getElementById("stopBtn").addEventListener("click", () => {
  if (mediaRecorder && mediaRecorder.state !== "inactive") {
    mediaRecorder.stop();
    document.getElementById("status").innerText = "üõë D·ª´ng ghi √¢m...";
  }
});

// =============================
// ‚ö° G·ª≠i ngay (realtime t·ªõi ESP32 qua server)
// =============================
document.getElementById("sendNowBtn").addEventListener("click", async () => {
  if (!audioBlob) return alert("‚ö†Ô∏è B·∫°n c·∫ßn ghi √¢m tr∆∞·ªõc khi g·ª≠i!");

  const fd = new FormData();
  fd.append("file", audioBlob, "voice.webm");

  document.getElementById("status").innerText = "üöÄ ƒêang g·ª≠i √¢m thanh...";

  try {
    const res = await fetch(`${API_BASE}/api/upload-voice`, {
      method: "POST",
      body: fd,
    });
    const data = await res.json();

    if (data.success) {
      document.getElementById("status").innerText = "‚úÖ G·ª≠i th√†nh c√¥ng!";
    } else {
      document.getElementById("status").innerText =
        "‚ùå G·ª≠i th·∫•t b·∫°i: " + data.message;
    }
  } catch (err) {
    console.error(err);
    document.getElementById("status").innerText = "‚ö†Ô∏è L·ªói k·∫øt n·ªëi server!";
  }
});

// =============================
// ‚è∞ H·∫πn gi·ªù g·ª≠i b√°o th·ª©c (voice + MQTT)
// =============================
document.getElementById("scheduleBtn").addEventListener("click", async () => {
  const title = document.getElementById("title").value || "B√°o th·ª©c kh√¥ng t√™n";
  const date = document.getElementById("date").value;
  const time = document.getElementById("time").value;

  if (!date || !time) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù!");
  if (!audioBlob) return alert("‚ö†Ô∏è H√£y ghi √¢m tr∆∞·ªõc khi h·∫πn gi·ªù!");

  const fd = new FormData();
  fd.append("title", title);
  fd.append("date", date);
  fd.append("time", time);
  fd.append("file", audioBlob, "voice.webm");

  document.getElementById("status").innerText = "üïí ƒêang t·∫°o b√°o th·ª©c...";

  try {
    const res = await fetch(`${API_BASE}/api/alarms`, {
      method: "POST",
      body: fd,
    });
    const data = await res.json();

    if (data.success) {
      document.getElementById("status").innerText =
        "‚úÖ ƒê·∫∑t b√°o th·ª©c th√†nh c√¥ng!";
    } else {
      document.getElementById("status").innerText =
        "‚ùå L·ªói: " + (data.message || "Kh√¥ng th·ªÉ t·∫°o b√°o th·ª©c!");
    }
  } catch (err) {
    document.getElementById("status").innerText = "‚ö†Ô∏è L·ªói k·∫øt n·ªëi server!";
  }
});
