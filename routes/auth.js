// routes/auth.js
import express from "express";
import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

const router = express.Router();

// ============================
// üîß Mongoose User Schema
// ============================
const userSchema = new mongoose.Schema({
  username: { type: String, unique: true, required: true },
  password: { type: String, required: true },
});

const User = mongoose.model("User", userSchema);

// ============================
// üìù ƒêƒÉng k√Ω t√†i kho·∫£n
// ============================
router.post("/register", async (req, res) => {
  try {
    const { username, password } = req.body;
    if (!username || !password)
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin!" });

    const existing = await User.findOne({ username });
    if (existing)
      return res.status(400).json({ success: false, message: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!" });

    const hashed = await bcrypt.hash(password, 10);
    await User.create({ username, password: hashed });

    res.status(200).json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: "L·ªói server!" });
  }
});

// ============================
// üîë ƒêƒÉng nh·∫≠p t√†i kho·∫£n
// ============================
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    if (!username || !password)
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin!" });

    const user = await User.findOne({ username });
    if (!user)
      return res.status(401).json({ success: false, message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" });

    const match = await bcrypt.compare(password, user.password);
    if (!match)
      return res.status(401).json({ success: false, message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u
